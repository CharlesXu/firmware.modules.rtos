/** \page OpenGEN_Generator OpenGEN Code Generator
 *
 * This is the manual of the OpenGEN Code Generator.
 *
 * \section OpenGEN_G_Int Introduction to the Code Generator
 *
 * The first importan to understand is why OpenSEK needs a code generator.
 * Goal of the project is to offer a software solution for embedded software.
 * But not for one also for all, so you need to configure and decide exact
 * what do you want to have.
 *
 * For example an user may need a OpenSEK OS to have only two tasks and other
 * user may want to have 20 task on the OpenSEK OS, same happens with all
 * modules, the user has to configurate the system. And the system will be
 * generated for exactly that configuration trying to save all possibly
 * resources.
 *
 * \section OpenGEN_G_Use Using OpenSEK
 *
 * OpenSEK generator is written in php and can be directly be called from
 * the command line. But is not necesary for you since it is being called
 * automaticaly from the make environment running:
 *
 * \b make \b generate
 *
 * any way you can find here the command lines options availables on the
 * generator.
 *
 * php generator.php [-l] [-h] [--cmdline] -c CONFIG_1 [CONFIG_2] -o OUTPUTDIR -f GENFILE_1 [GENFILE_2] 
 * 
 * - TODO run php generator.php -h for more details
 *
 * \section OpenSEK_G_Dev Developing generated code
 *
 * In this section you will see how to develop new code to be generated with
 * the OpenSEK generator.
 *
 * First of all lets take a look in the internal form of work of the generator.
 * The generator is written in php and is based in 3 type of modules:
 * the parser, the confiugrator and the genrator it self. Today only one parser
 * available and it is the oil parser.
 *
 * So today you have 3 files for the generator:
 *
 * - generator.php
 * - config.php
 * - oilParser.php
 *
 * In the future maybe a new confiugration parser can be created to take the
 * configuration from other types of files like for example XML.
 *
 * There is a fourth type of module and these are the files to be generated.
 * The files to be generated are written in php too and are called from the
 * generator.
 *
 * The generator.php file is the only one which shall be called from the
 * command line or in our case from the make environment. The generator.php
 * will call the config given all configuration files, the configurator
 * will choose the right parcer for that configuration call and call
 * the correspondent parser, today only the oilParser.php. All configuration 
 * is merge together to a big configuration class in config.php.
 *
 * One time again on the generator.php and after the configuration was parsed
 * the generator.php calls all files to be generated chaning its name from:
 * Name.c.php to Name.c, or Name.h.php to Name.h, or Name.mak.php to Name.mak
 * and coping them from the original place to the out/gen directory.
 *
 * The files to be generated can use the "$config" class to get information
 * about the project configuration and to generate the code in function
 * of this confiugration.
 *
 * \subsection OpenSEK_G_Dev_Func Generator provided functions
 *
 * There are some commands that are provided from the generator:
 *
 * - \b warning("msg") this function increments the geneator warnings counter
 * and prints on the screen the warning message, the generator process will
 * be complete successfully.
 * - \b error("msg") this function increments the generator error counter and
 * prints on the screen the error message, the generator process will be
 * complete with errors.
 * - \b halt("msg") this function will halt the generation process without 
 * parse any code more, the generator proces will be aborted with this error.
 *
 * We recommend you to use warnings and errors and to avoid use of halt. Halt
 * is only allowed to be used in cases where a further generation is not
 * possibly.
 *
 * \subsection OpenSEK_G_Dev_Meth Configurator provided methods
 *
 * The configurator provides some methods to allow you to find out what
 * the user has configurate.
 *
 * \subsubsection getList
 * \subsubsection getValue
 *
 */
