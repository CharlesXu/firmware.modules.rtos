<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
	"/usr/share/xml/docbook/schema/dtd/4.4/docbookx.dtd">
	 
<book>

<bookinfo><title>FreeOSEK Manual</title>
	<subtitle> Scalable Solution for your Embedded System</subtitle>
	<authorgroup>
		<author>
			<firstname></firstname>
			<surname>FreeOSEK Team</surname>
			<email>http://opensek.sourceforge.net</email>
		</author>
	</authorgroup>
	<corpname>FreeOSEK Team</corpname>
	<releaseinfo>Version 0.1.0 - 31/05/2009</releaseinfo>
	<abstract>
		<para><application>FreeOSEK</application> is a scalable software solution for embedded software which main part is
		the FreeOSEK RTOS based on OSEK-VDX RTOS specification. OSEK-VDX RTOS standard has been used successfully for more
		than a decade in the car industry.</para>
		<para>FreeOSEK is a static configurable system where only the needed resources are created. This feature improves not
		only the RAM/ROM consumption but the runtime and real time characteristics, as well. For example usually you may need
		between 2 - 10 kB for the FreeOSEK RTOS, which may vary according to the platform, compiler, compiler options,
		configuration, etc. This makes FreeOSEK best suitable for small and fast real time embedded systems.</para>
		<para><warning><para>We are working on this document so it may change fast and may contect unespected and unwanted
		errors.</para></warning></para>
	</abstract>

	<keywordset>
		<keyword>osek</keyword>
		<keyword>open source osek</keyword>
		<keyword>free osek</keyword>
		<keyword>FreeOSEK</keyword>
	</keywordset>

	<copyright>
		<year>2008, 2009</year>
		<holder>FreeOSEK Project -
		<ulink url="http://opensek.sourceforge.net">http://opensek.sourceforge.net</ulink></holder>
	</copyright>
</bookinfo>

<chapter id="introduction"><title>Introduction</title>
		<sect1><title>About this Manual</title>
			<para>This is the FreeOSEK Project Manual. This Manual do not replace other
			available documentation, like for example the OSEK-VDX RTOS specification which
			you may want to read <citation>OSEK</citation>.</para>
		</sect1>
		<sect1><title>Project history</title>
			<para>The project started as an idea many years ago on my university years. At that moment (2004) I had only
			few knowledge of embedded systems and no idea how to create a code generator which is an indispensable
			part for an OSEK implementation. Some time aftar that in Jun 2008 I had the idea to use php as generator
			and I start programming the first FreeOSEK version which was available in September 2008 for posix
			arhcitectures by simulating the needed hardware of an embedded system.</para>
			<para>After creating the first release I dicide to create a SourceForge.org project to try to find other
			developers to help me with the work to do. The project was first registred as OpenSEK and now we are
			waiting to be reanmed to FreeOSEK.</para>
		</sect1>
		<sect1><title>How to read this manual</title>
			<para>You can choose how to read this manual but you have to know that the manual was not written to be
			readed from top to bottom at ones. You can use it more as a reference book. Other important point
			is that you may need to read other documentation indicated on the releated documents.</para>
		</sect1>
		<sect1><title>License</title>
			<para>FreeOSEK is licensed as GPL v3 with a link exception. This means that FreeOSEK is free and open
			source conform GPL v3, but thanks the link exception FreeOSEK can be linked together with other
			software with different type of licensing (open or privative). In this way FreeOSEK can be used
			for commercial purposes.</para>
			<para>You should have received a copy of the GNU General Public License along with FreeOSEK.
			If not, see <ulink url="http://www.gnu.org/licenses/"></ulink>.</para>
		</sect1>
</chapter>

<chapter id="gettingstarted"><title>Getting Started</title>
		<sect1><title>Get FreeOSEK</title>
			<sect2><title>Download an official release</title>
				<para>The official <application>FreeOSEK</application> releases can be downloaded from
				<ulink url="http://sourceforge.net/project/platformdownload.php?group_id=240313">SourceForge.net</ulink>
				</para>
			</sect2>
			<sect2><title>Check out from SVN server</title>
				<para>You can download FreeOSEK from the <glossterm linkend="svn">SVN</glossterm> server.
				The repository is divided in 3 folders to know:</para>
				<itemizedlist>
					<listitem><para>trunk</para></listitem>
					<listitem><para>releases</para></listitem>
					<listitem><para>branches</para></listitem>
				</itemizedlist>
				<para>In <emphasis>trunk</emphasis> you can find the version of FreeOSEK under development. The trunk folder is
				not always working, neither tested. So if you decide to help on the project development you may want to try it,
				in other case we recommend you to take the realese folder where you can find stable FreeOSEK versions.</para>
				<para>From <emphasis>releases</emphasis> folder you can check all releases.</para>
				<para>We try to avoid using the <emphasis>branches</emphasis> folder, but not always is possible. Goal of this
				is to perform paralel developments which can not be performed together on trunk, so the trunk is branched to a
				folder under branches and when the paralel development is finished the result is merged to the trunk. If you are
				not a developer member of the project do not check out from this folder.</para>
				<para>To check out from <glossterm linkend="svn">SVN</glossterm> you can use any svn tool. In a unix-like
				system or cygwin on windows we recommend you to use the <command>svn</command> command in following way:
				<screen>
				<prompt>bash$ </prompt><userinput>make freeosek</userinput> 
				<prompt>bash$ </prompt><userinput>svn co https://opensek.svn.sourceforge.net/svnroot/opensek/trunk freeosek</userinput>
				</screen>
				If you are a windows user you may want to use <citation>Tortoise SVN</citation></para>
			</sect2>
		</sect1>
		<sect1><title>Installing and running</title>
			<para>If you have download on FreeOSEK release you have to untar it before doing anything else:
			<screen>
				<prompt>bash$ </prompt><userinput>tar -xzf FreeOSEK_rel_x_x_x_YYYYMMDD_name</userinput>
			</screen>
			After this you have to edit the Makefile on the root directory and set the make variable ARCH
			to the arch that you want to compile for. Valid ARCH are at the moment are:</para>
			<itemizedlist>
				<listitem><para>win</para></listitem>
				<listitem><para>posix</para></listitem>
				<listitem><para>arm7</para></listitem>
			</itemizedlist>
			<para>After selecting the right architecture you can execute the followings commands:
			<screen>
				<prompt>bash$ </prompt><userinput>make generate</userinput>
				<prompt>bash$ </prompt><userinput>make</userinput>
			</screen>
			the binary file will be linked on /out/bin/FreeOSEK. If you dont change the original makefile you
			will generate and compile the basic module tests for FreeOSEK. If you execute the executable after
			compiling it for windows or posix you shall see the test cases number and OK, FAILED or NOTRUN on
			the screen. If one or more of the test cases results are other than OK you are having problems.
			You can contact the FreeOSEK team for support or try to debug by your self.</para>
		</sect1>
		<sect1><title>Getting Support</title>
			<para>There are many ways to get free support. You can choose the way that you prefer, but we asked you
			to check before if nobody else asks the same question before.</para>
			<sect2><title>Forum</title>
				<para>You can start a forum discussion about any problem you have under:
				<ulink url="http://opensek.sourceforge.net/links/support-forum.php"></ulink>.</para>
			</sect2>
			<sect2><title>Mailing List</title>
				<para>You can write a mail to the mailing list: <ulink url="https://opensek.sourceforge.net/links/support-mailinglist.php"></ulink></para>
			</sect2>
			<sect2><title>Support over Tracker</title>
				<para>You can open a tracker: <ulink url="http://opensek.sourceforge.net/links/support-tracker.php"></ulink></para>
			</sect2>
		</sect1>
		<sect1><title>Improving FreeOSEK</title>
			<sect2><title>Report Bugs</title>
				<para>Bugs can be reported in the bug tracker of FreeOSEK Project in SourceForge.net:
				<ulink url="http://opensek.sourceforge.net/externlink.php?LINK=http%3A%2F%2Fsourceforge.net%2Ftracker%2F%3Ffunc%3Dadd%26amp%3Bgroup_id%3D240313%26amp%3Batid%3D1112670"></ulink>.</para>
			</sect2>
			<sect2><title>Request Improvements</title>
				<para>Improvements or new features can be reported in the feature requested of FreeOSEK Project in SourceForge.net:
				<ulink url="http://opensek.sourceforge.net/externlink.php?LINK=https%3A%2F%2Fsourceforge.net%2Ftracker%2F%3Ffunc%3Dadd%26amp%3Bgroup_id%3D240313%26amp%3Batid%3D1112673"></ulink>.</para>
			</sect2>
			<sect2><title>Get Involved</title>
				<para>We are always seeking for new and motivated developers, users and anyone with new ideas to support and cooperate with FreeOSEK Project.
				You don't need to have all listed skills to participate, but at least one of two of them may help.</para>
				<itemizedlist>
					<listitem><para>c</para></listitem>
					<listitem><para>php</para></listitem>
					<listitem><para>perl</para></listitem>
					<listitem><para>gnu make</para></listitem>
					<listitem><para>microcontrollers porters</para></listitem>
					<listitem><para>bus experts (tcpip/can/etc.)</para></listitem>
				</itemizedlist>
				<para>By coding you may help the project with for example one of the following tasks:</para>
				<itemizedlist>
					<listitem><para>Porting FreeOSEK to new architectures</para></listitem>
					<listitem><para>Writing new FreeOSEK modules</para></listitem>
					<listitem><para>Testing FreeOSEK</para></listitem>
				</itemizedlist>
				<para>In case that you want to support the project but wihtout coding, you can do it too, for example by:</para>
				<itemizedlist>
					<listitem><para>Using FreeOSEK</para></listitem>
					<listitem><para>Writing Documentation</para></listitem>
					<listitem><para>Correcting the Documentation</para></listitem>
					<listitem><para>Promoting FreeOSEK in your company, university, etc.</para></listitem>
					<listitem><para>Writing a review of FreeOSEK</para></listitem>
					<listitem><para>Linking us</para></listitem>
					<listitem><para>Asking for new Features</para></listitem>
					<listitem><para>Leaving your opinion of FreeOSEK</para></listitem>
				</itemizedlist>
				<para>And at last but not at least you may want to contribute with the project with a donation:</para>
				<itemizedlist>
					<listitem><para>Direct money donation in SoruceForge</para></listitem>
					<listitem><para>Contact the team for special donations</para></listitem>
					<listitem><para>Providing new Development Boards</para></listitem>
					<listitem><para>Providing Debugger or other Hardware</para></listitem>
				</itemizedlist>
			</sect2>
		</sect1>
</chapter>

<chapter id="generationconcept"><title>Generation Concept</title>
	<para>FreeOSEK is a pre configurable system. This means that the FreeOSEK RTOS and
	all other componets (modules and drivers) are generated in based on the 
	confiugration. Goal is to keep the system a small as necesary but with all
	necesary features.</para>
	<sect1><title>Configuration</title>
		<para>Today only the OIL format (see <citation>OIL</citation>) is supported for the
		configuration. In the future new	formats are planed, like for example a xml based
		configurations.</para>
		<para>FreeOSEK itselfs do not provide any confiugration tool, so the configuration
		can be written manually by de user or using an other configuration tool. We
		recommend to perform it manually or using a OIL configurator, like for example
		<citation>GOBX</citation>.</para>
		<para>The OIL format is specified by OSEK-VDA, refer you to todo OIL, anyway
		the OIL format used by FreeOSEK is not 100% conform to
		the specification, at least not right now. And the Language has extensions,
		since there is no specification of OIL for for example the HAL (drivers).</para>
		<para>To have an overview of the OIL statements for every FreeOSEK Module
		to refer you to the todo Configuration chapter of the module that you want
		to configure.</para>
	</sect1>
	<sect1><title>Generation</title>
		<para>With the configuration complete the generation process can be started.
		This process takes the project OIL configurations files which are referred over
		the makefiles and parse them in the following way:</para>
		<itemizedlist>
			<listitem><para>parser</para></listitem>
			<listitem><para>config</para></listitem>
			<listitem><para>generator</para></listitem>
			<listitem><para>files to be generated 1..n</para></listitem>
		</itemizedlist>
		<para>The first step of the generation is the parser, today only an OIL format
		parser is available. The parser takes the input files and parse the parameters and
		values.</para>
		<para>The parsed information is communicated to the config class which saves all
		configured information in a standard way. The idea behind this is to have a generic
		configuration class for any type of parser.</para>
		<para>With the user configuration available into the config class the generator will
		execute one by one all files to be generated. Each file to be generated may take information
		of the config class to generate the right code for the system. The generator will
		report all the errors and warnings found by the generated files to the user. One extra
		feature of the generator is that all generated files will be checked for changes, if at least
		one file was updated the generator will be called again. This allows the generator to generate
		for example makefiles which will change the generation process the next time that the generator
		is called</para>
	</sect1>
</chapter>

<chapter id="opengen"><title>Generic Files and Make Environment</title>
	<sect1><title>Modules</title>
		<para>FreeOSEK Project is based on modules. Every module is a direcotry on the root FreeOSEK root
		directory. Today available modules are:</para>
		<itemizedlist>
			<listitem><para><emphasis>FreeOSEK</emphasis>: FreeOSEK RTOS Module</para></listitem>
			<listitem><para><emphasis>OpenGEN</emphasis>: Generator and Generic Files</para></listitem>
			<listitem><para><emphasis>OpenDRV</emphasis>: Drivers</para></listitem>
			<listitem><para><emphasis>TestSuite</emphasis>: Test Suite Module</para></listitem>
			<listitem><para><emphasis>examples</emphasis>: Module containing some FreeOSEK examples</para></listitem>
		</itemizedlist>
		<para>Modules are not always active. To use a module on a specific project the makefile shall include it.
		To find more details how to include a module please refer you to the next chapter.</para>
		<sect2><title>Module Structure</title>
			<para>All modules are based on the same structure with the followings directories:</para>
			<itemizedlist>
				<listitem><para><emphasis>doc</emphasis>: documentation</para></listitem>
				<listitem><para><emphasis>gen</emphasis>: generated files</para></listitem>
				<listitem><para><emphasis>inc</emphasis>: header files</para></listitem>
				<listitem><para><emphasis>mak</emphasis>: makefiles</para></listitem>
				<listitem><para><emphasis>src</emphasis>: source files</para></listitem>
				<listitem><para><emphasis>tst</emphasis>: test files</para></listitem>
			</itemizedlist>
			<para>Important is that the <emphasis>mak</emphasis> directory shall include the main <emphasis>Makefile</emphasis> for
			the module which shall:</para>
			<itemizedlist>
				<listitem><para>include all other needed makefiles</para></listitem>
				<listitem><para>set the files to be generated</para></listitem>
				<listitem><para>set the path to the header files to be included</para></listitem>
				<listitem><para>set the source files to be compiled</para></listitem>
			</itemizedlist>
		</sect2>
	</sect1>
</chapter>

<chapter id="opendrv"><title>Drivers</title>
	<para>The Drivers on FreeOSEK Project can be found in the OpenDRV Module. There are many drivers planed for the future
	and some of them actual on development.</para>
	<sect1><title>Analog Digital Converter Driver</title>
		<para>This driver controls the analog digital converter pins available on the processor. The driver is based on
		<citation>AUTOSAR-ADC</citation> ADC Driver specification but is not 100% conform neither complete.</para>
		<sect2><title>Types</title>
			<para></para>
		</sect2>
		<sect2><title>Services</title>
			<para></para>
		</sect2>
		<sect2><title>Configuration</title>
			<para></para>
		</sect2>
	</sect1>
	<sect1><title>Digital Input Output Driver</title>
		<para>This driver controls the digital input and output pins available on the processor. The driver is based on
		<citation>AUTOSAR-DIO</citation> DIO Driver specification but is not 100% conform neither complete.</para>
		<sect2><title>Types</title>
			<para></para>
		</sect2>
		<sect2><title>Services</title>
			<sect3><title>Dio_ReadChannel</title>
				<funcsynopsis>
					<funcprototype>
						<funcdef>Dio_LevelType <function>Dio_ReadChannel</function></funcdef>
						<paramdef>
							Dio_ChannelType <parameter>ChannelID</parameter>,
							DioDio_LevelType <parameter>Level</parameter>
						</paramdef>
					</funcprototype>
				</funcsynopsis>
				<para>The Dio_ReadChannel service shall used to read the state of a specific channel. This service
				is implemented as function if DioDevErrorDetect is ENABLE and as macro if DioDevErrorDetect is DISABLE.</para>
				<note><para>At the moment the service is only provided as macro and DioDevErrorDetect can only be disabled.</para></note>
			</sect3>
		</sect2>
		<sect2><title>Configuration</title>
			<para></para>
		</sect2>
	</sect1>
	<sect1><title>Pulse Width Modulator Driver</title>
		<para>This driver controls the pulse width modulated output pins available on the processor. The driver is based on
		<citation>AUTOSAR-PWM</citation> PWM Driver specification but is not 100% conform neither complete.</para>
		<sect2><title>Types</title>
			<para></para>
		</sect2>
		<sect2><title>Services</title>
			<para></para>
		</sect2>
		<sect2><title>Configuration</title>
			<para></para>
		</sect2>
	</sect1>
</chapter>

<chapter id="freeosek"><title>Real Time Operating System</title>
	<sect1><title>Introduction</title>
		<para>FreeOSEK RTOS is a free and open source implementation of the Real Time Operating System specified
		by OSEK-VDX. The phylosophy of this RTOS is to provide a system with standardised interfaces, scalabilty,
		standard error checking mechanismus and portable.</para>
		<para>This chapter will explain only the basic ideas of an OSEK system specially of FreeOSEK but for
		more details please refer you to <citation>OSEK</citation> where you can find the OSEK-VDX specifications.</para>
		<para>In OSEK the are two types of run levels:</para>
		<itemizedlist>
			<listitem><para>Task level</para></listitem>
			<listitem><para>ISR level</para></listitem>
		</itemizedlist>
		<para>This means that code will be executed alway in one of this both contexts.</para>
		<sect2><title>Task Level</title>
			<para>On the task level the system will execute tasks. But different as in Windows or Linux on FreeOSEK
			the tasks are defined statically on configuration time as you sow on (todo link to chapter generation).
			This means that after generating and compiling the system, no more taks can be added. It is not possibly to
			create new tasks in a dynamic way.</para>
			<para>There are two types of supported tasks:</para>
			<itemizedlist>
				<listitem><para>Basic</para></listitem>
				<listitem><para>Extended</para></listitem>
			</itemizedlist>
			<para>The difference between both types of tasks are the supported states. Basic tasks have
			the following states:</para>
			<itemizedlist>
				<listitem><para><emphasis>Running</emphasis>: the task is beeing execute by the processor, only one task at the time can be on this state.</para></listitem>
				<listitem><para><emphasis>Ready</emphasis>: the task is ready and waiting to be executed on the execution queue.</para></listitem>
				<listitem><para><emphasis>Suspended</emphasis>: the task is stopped.</para></listitem>
			</itemizedlist>
			<para>Extra to these states the <emphasis>Extended Tasks</emphasis> can be in <emphasis>Waiting</emphasis> state:</para>
			<itemizedlist>
				<listitem><para><emphasis>Waiting</emphasis>: the task is waiting for the occurence of one or more events.</para></listitem>
			</itemizedlist>
			<para>Not all convinations of state changes are allowed, here a list of allowed task state changes:</para>
			<itemizedlist>
				<listitem><para><emphasis>activate</emphasis>: the task is moved from the suspended state to the ready state</para></listitem>
				<listitem><para><emphasis>start</emphasis>: the task is moved from the ready state to the running state</para></listitem>
				<listitem><para><emphasis>preempt</emphasis>: the taks is moved from the running state to the ready state</para></listitem>
				<listitem><para><emphasis>teminate</emphasis>: the task is moved from the running state to the suspended state</para></listitem>
			</itemizedlist>
			<para>For <emphasis>Extended tasks</emphasis> two extra state changes are allowed:</para>
			<itemizedlist>
				<listitem><para><emphasis>wait</emphasis>: the taks is moved from the running state to the waiting state</para></listitem>
				<listitem><para><emphasis>release</emphasis>: the task is moved from the waiting state to the ready state</para></listitem>
			</itemizedlist>
			<sect3><title>Priority</title>
				<para>The scheduler decides in function of the task priority, which is the next task to be started. When two tasks
				have the same priority the task which was activated first will be executed. This means that the RTOS will use a
				(todo glosary) FIFO for each priority. On a task activation the task index will be set on the corresponding FIFO.</para>
				<para>Task priorites are set on configuration time and a higer value represents a higher priority. The priority shall
				be a number between 0 and 255.</para>
			</sect3>
			<sect3><title>Preemptive vs. Non-Preemptive tasks</title>
				<para>The RTOS support two types of scheduling policies. Every task can be configured as preemptive or non-preemptive. If
				all system tasks are configured as preemptive or non-preemptive we speak from a preemptive or non-preemptive system. In
				other cases if both types of tasks are used the system will be a mix-preemptive system.</para>
				<sect4><title>Preemptive tasks</title>
					<para>A <emphasis>preemptive</emphasis> task can be preempted (interrupted) while running and set back to ready state
					in case that a higher priority task is ready to be executed. If a task with a low priority takes a long time to be
					executed maybe is a good idea to set it as preemptive, in other case it may block other higher priority tasks
					until the execution is completed.</para>
				</sect4>
				<sect4><title>Non-Preemptive tasks</title>
					<para>A <emphasis>non-preemptive</emphasis> task can not be preempted (interrupted) while running. This means that
					a non-preemptive task may block higher priority task to be executed on time. Non-Preemptive scheduling is recommended
					for short tasks where the preemption time is comparable with the execution time and for high priority tasks where
					the blocked task may not be so critical.</para>
					<para>It is important to see that Non-Preemptive tasks have an extra indirect advantage and is that a Non-Preemptive task
					can share the stack with other Non-Preemptive tasks and do not need any Task Context since not task switch will occur.
					This will make the RTOS a litlle bit smaller and consum less RAM.</para>
				</sect4>
			</sect3>
			<sect3><title>Group of Tasks</title>
				<para>The user may be interesed to have some types or Non-Preemtive task for a group of tasks. This means that some
				tasks all in a task group may be Non-Preemtive to each other but may be Preemted by task with higher priorities of
				other groups. Every task can belong to maximal one group.</para>
			</sect3>
			<sect3><title>Application Modes</title>
				<para>The user shall configure at least one Application Modes. For every Application Mode the user can select a some
				tasks and alarms to be started autmaticaly. The user has to take care to select the adequate Application Mode after
				every reset and call the StartOS interfaces indicating the right application mode.</para>
				<para>Application Modes allows the user to have more than one system and to select it at startup.</para>
			</sect3>
			<sect3><title>Events</title>
				<para>Events are used to syncronize events. Only an <emphasis>Extended Task</emphasis> may have an event assigned to it self.
				Only the task owning an event can clear or wait for the pre configured events assigned	to itself. Every task or ISR2 can set
				an event of any other extended task owning the corresponding event. Is not possible to clear events or to wait for events
				assigned to other tasks.</para>
			</sect3>
			<sect3><title>Resources</title>
				<para>Resources are used to coordinate access of many tasks with different priorities to one common resource. The resource
				mechanism avoid that two tasks get access to a same resorce any time. To avoid this a Priority Ceiling Protocol is used.
				This protocol avoids the posbility that a task tries to use a resource which is beeing accessed by other task. Avoding
				deadlocks too.</para>
				<para>A resource shall be assigned to at least two tasks.</para>
				<sect4><title>Ceiling Protocol</title>
					<para>Every resource will receive a static defined, the priority of the resource shall:</para>
					<itemizedlist>
						<listitem><para>shall be set to at least the highest priority of all tasks using this resource.</para></listitem>
						<listitem><para>shall be lower to the lowest priority of all tasks that do not use this resource and have higher
						priority to all taks that use the resource.</para></listitem>
					</itemizedlist>
					<para>In case that a task gets a resource, its priority is set to the resource priority. During the time that the task
					is using the resource no other task using the resource will be started by the scheduler since all other tasks using that
					resource will have a lower priority. When the task using the resource release it, the task priority is set back to the
					original priority.</para>
				</sect4>
			</sect3>
			<sect3><title>Internal Resources</title>
				<para>Internal resources are like resources but are not visible to the user. Every task can be assigned maximal to one
				internal resource. Every time that the task is started the internal resources will be getted and released when the tasks
				terminates.</para>
				<para>This allows a task to have two priorites, one on the ready state to decide when the task will be started by the
				scheduler and an other priority during the execution, this running priority decide when the task will be preempted.</para>
			</sect3>
		</sect2>
		<sect2><title>ISR Level</title>
			<para>TODO</para>
		</sect2>
		<sect2><title>Alarms</title>
			<para>TODO</para>
		</sect2>
	</sect1>
	<sect1><title>Data type</title>
		<para></para>		
	</sect1>
	<sect1><title>Services</title>
		<para></para>
		<funcsynopsis>
			<funcsynopsisinfo>#include "os.h"</funcsynopsisinfo>
			<funcprototype>
				<funcdef>StatusType <function>ActivateTask</function></funcdef>
				<paramdef>TaskType<parameter>TaskID</parameter></paramdef>
				<!--para>This system service activates the task with the ID indicated in the TaskID parameter.</para>
				<para>This service can be used to activate any FreeOSEK Tasks. By the activation the task will be transfered from the suspended to the ready state. Basic tasks may be activated more tha one time, if configured. A second or n activation puts the task for a second or n time on the ready list. A maximal count of activation shall be defined on the OIL configuration for every basic tasks. Extended task can only be activated ones.

FreeOSEK generates macros with the names of the tasks as defined on the on the OIL configuration.

Rescheduling takes place before returning. Activating a higher priority task preemts the running task (only if preemtable) and start the activated task.

This function may return E_OK or E_OS_LIMIT in standard mode. Extra in extended mode E_OS_ID may be returned.

If the return code is other than E_OK, the ErrorHook is enable, and ErrorHook is not beeing executed the ErrorHook function will be called.</para-->
			</funcprototype>
		</funcsynopsis>
	</sect1>
	<sect1><title>Platform specific implementation</title>
		<sect2><title>FreeOSEK RTOS on POSIX Systems</title>
			<para>FreeOSEK uses some posix services to simulate an embedded hardware, for example the interrupts and timers.
			For the interrupt mechanisms a message queue with signal is used. Every time that you send a message of only one
			byte to the message queue /dev/mqueue/BINNAME where BINNAME is the binary name of the project defined in the
			Makefile with the PROJECT variable. As defualt /dev/mqueue/FreeOSEK. The received byte in this queue is
			interprated as the interrupt number.</para>
			<sect3><title>Timer Simulations</title>
				<para>The POSIX variant has two simulated HW timers which have an interrupt every 10ms. Anyway alarms are
				not working on the prebeta release.</para>
			</sect3>
		</sect2>
		<sect2><title>FreeOSEK RTOS on Windows</title>
			<para>To simulate the interrupts on windows you are going to need an extra packet of cywgin called
			<emphasis>cygrunsrv</emphasis> you can find it in the <emphasis>admin tools</emphasis> on the cygwin
			configuration.</para>
			<para>After installing the packet you have to configure and start the <emphasis>cygserver</emphasis>
			for the first time, the server will to take care of the IPC for the interrupts simulations on Windows. 
			You can run the following command to create the default configuration:
			<screen>
				<prompt>bash$ </prompt><userinput>cygserver-config</userinput>
				<prompt></prompt><userinput> ... </userinput>
			</screen>
			After loading the default configuration you can use following commands to start and stop the server respectivly:
			<screen>
				<prompt>bash$ </prompt><userinput>net start cygserver</userinput>
				<prompt></prompt><userinput> ... </userinput>
			</screen>
			<screen>
				<prompt>bash$ </prompt><userinput>net stop cygserver</userinput>
				<prompt></prompt><userinput> ... </userinput>
			</screen>
			At last you have to enable the server into your environment setting the CYGWIN environment variable to server, for
			example running:
			<screen>
				<prompt>bash$ </prompt><userinput>export CYGWIN=server</userinput>
			</screen>
			</para>
		</sect2>
		<sect2><title>FreeOSEK RTOS on ARM7</title>
			<para>TODO</para>
		</sect2>
		<sect2><title>Porting FreeOSEK RTOS to new architectures</title>
			<para>Before starting to port FreeOSEK to a new platform you will need to fullfill following points:</para>
			<itemizedlist>
				<listitem><para>to have a good background of the platform</para></listitem>
				<listitem><para>to have a good background of the assembler of the platform</para></listitem>
				<listitem><para>to have good c embedded programming know how</para></listitem>
				<listitem><para>to have some php and gnu make know how</para></listitem>
				<listitem><para>to have at least one evaluation board</para></listitem>
				<listitem><para>to have a debugger</para></listitem>
				<listitem><para>to have the corresponding toolchain including, debugging software, linker, compiler, etc.</para></listitem>
				<listitem><para>at least 100 hours to invest on this task (around of one or two months of open source working time)</para></listitem>
			</itemizedlist>
			<para>The best way to start with the port is to use the <emphasis>tmparch</emphasis> (template architecture) or an other architecture
			as a start point. The <emphasis>arm7</emphasis> is actually the most stable supported hardware so we recommend you to use this
			as example, but you work has to be based on the template.</para>
			<para>Use the SVN copy command to create a new architecture with the right name, take into account that you will need upto 3
			names to disting your hardware from others:
			<itemizedlist>
				<listitem><para><emphasis>ARCH</emphasis>: for example arm7</para></listitem>
				<listitem><para><emphasis>CPUTYPE</emphasis>: for example lpc2xxx</para></listitem>
				<listitem><para><emphasis>CPU</emphasis>: for example lpc2468</para></listitem>
			</itemizedlist>
			In some cases only two deeph levels are needed, in such cases you can use ARCH and CPUTYPE avoding CPU. But you always have to use
			two depth levels, in other cases something is going wrong.</para>
			<para>The template architecture is so much and good documented as possibly. So please try to use other architectures as examples
			but always read the template. You will find a lot of <emphasis>error</emphasis> compiler directives on the template so you can
			write the code an remove the comments.</para>
		</sect2>
	</sect1>
	<sect1><title>Conformance Test</title>
		<para>OSEK-VDX consortium specifies not only the RTOS also the test method too. The FreeOSEK OS is
		tested under the specified test specifications provided by OSEK-VDX:</para>
		<itemizedlist>
			<listitem><para><citation>OSEK-TM</citation>: specifies the test methodology</para></listitem>
			<listitem><para><citation>OSEK-OS-TPL</citation>: specifies the operating system test plan</para></listitem>
			<listitem><para><citation>OSEK-OS-TPR</citation>: specifies the operating system test procedure</para></listitem>
		</itemizedlist>
		<note><para>The last specification from OSEK-VDX OS is from year 2005 while the last update of
		the OSEK-VDX test concept is from year 1999.</para></note>
	</sect1>
</chapter>

<chapter><title>Examples</title>
	<para>In this chapter you can find a detailed explanation of the examples deliveried with FreeOSEK.</para>
	<sect1><title>Blinking</title>
		<para></para>
	</sect1>
	<sect1><title>Car Combi</title>
		<para></para>
	</sect1>
	<sect1><title>uIP</title>
			<para></para>
	</sect1>
</chapter>

<glossary>
	<glossentry id="adc"><glossterm>ADC</glossterm>
		<acronym>ADC</acronym>
		<glossdef>
			<para>Analog Digital Converter</para>
		</glossdef>
	</glossentry>
	<glossentry id="autosar"><glossterm>AUTOSAR</glossterm>
		<acronym>AUTOSAR</acronym>
		<glossdef>
			<para><ulink url="http://www.autosar.org">Automotive Open System Architecture</ulink></para>
		</glossdef>
	</glossentry>
	<glossentry id="dio"><glossterm>DIO</glossterm>
		<acronym>DIO</acronym>
		<glossdef>
			<para>Digital Input/Output</para>
		</glossdef>
	</glossentry>
	<glossentry id="hal"><glossterm>HAL</glossterm>
		<acronym>HAL</acronym>
		<glossdef>
			<para>Hardware Abstraction Layer</para>
		</glossdef>
	</glossentry>
	<glossentry id="ipc"><glossterm>IPC</glossterm>
		<acronym>IPC</acronym>
		<glossdef>
			<para>Inter Process Communication</para>
		</glossdef>
	</glossentry>
	<glossentry id="oil"><glossterm>OIL</glossterm>
		<acronym>OIL</acronym>
		<glossdef>
			<para>OSEK Implementation Language</para>
		</glossdef>
	</glossentry>
	<glossentry id="osek"><glossterm>OSEK</glossterm>
		<acronym>OSEK</acronym>
		<glossdef>
			<para>Open Systems and their Interfaces for the Electronics in Motor Vehicles from german
			(Offene Systeme und deren Schnittstellen f&uuml;r die Elektronik in Kraftfahrzeugen)</para>
			<!--glossseealso otherterm="osek-vdx">OSEK-VDX</glossseealso-->
		</glossdef>
	</glossentry>
	<glossentry id="osek-vdx"><glossterm>OSEK-VDX</glossterm>
		<glosssee otherterm="osek"/>
	</glossentry>
	<glossentry id="pwm"><glossterm>PWM</glossterm>
		<acronym>PWM</acronym>
		<glossdef>
			<para>Pulse Widht Modulation</para>
		</glossdef>
	</glossentry>
	<glossentry id="rtos"><glossterm>RTOS</glossterm>
		<acronym>RTOS</acronym>
		<glossdef>
			<para>Real Time Operating System</para>
		</glossdef>
	</glossentry>
	<glossentry id="svn"><glossterm>SVN</glossterm>
		<acronym>SVN</acronym>
		<glossdef>
			<para>Subversion</para>
		</glossdef>
	</glossentry>
</glossary>

<bibliography><title>Related Documentation</title>
	<bibliodiv><title>Specifications</title>
		<biblioentry>
			<abbrev>AUTOSAR-ADC</abbrev>
			<publisher>
				<publishername>AUTOSAR</publishername>
			</publisher>
			<title><ulink url="http://www.autosar.org/download/specs_aktuell/AUTOSAR_SWS_ADC_Driver.pdf">Specification of ADC Driver
			- Document Version: 3.0.3</ulink></title>
			<pubdate>15.08.2008</pubdate>
		</biblioentry>
		<biblioentry>
			<abbrev>AUTOSAR-DIO</abbrev>
			<publisher>
				<publishername>AUTOSAR</publishername>
			</publisher>
			<title><ulink url="http://www.autosar.org/download/specs_aktuell/AUTOSAR_SWS_PWM_Driver.pdf">Specification of PWM Driver
			- Document Version: 2.2.2</ulink></title>
			<pubdate>15.08.2008</pubdate>
		</biblioentry>
		<biblioentry>
			<abbrev>AUTOSAR-PWM</abbrev>
			<publisher>
				<publishername>AUTOSAR</publishername>
			</publisher>
			<title><ulink url="http://www.autosar.org/download/specs_aktuell/AUTOSAR_SWS_DIO_Driver.pdf">Specification of DIO Driver
			- Document Version: 2.2.2</ulink></title>
			<pubdate>15.08.2008</pubdate>
		</biblioentry>
		<biblioentry>
			<abbrev>OSEK</abbrev>
			<!--authorgroup>
				<author><surname>OSEK/VDX</surname></author>
			</authorgroup-->
			<!--copyright><holder>OSEK/VDX steering committee</holder></copyright-->
			<!--editor><surname>OSEK</surname></editor-->
			<!--isbn>0-201-10088-6</isbn-->
			<publisher>
				<publishername>Open Systems and the Corresponding Interfaces for Automotive Electronics</publishername>
			</publisher>
			<title>OSEK/VDX Operating System Specification - Version 2.2.3</title>
			<pubdate>17.02.2005</pubdate>
		</biblioentry>
		<biblioentry>
			<abbrev>OSEK-TM</abbrev>
			<publisher>
				<publishername>OSEK-VDX</publishername>
			</publisher>
			<title><ulink url="http://portal.osek-vdx.org/files/pdf/modistarc/tmeth20.pdf">Conformance Testing Methodology
			- Document Version: 2.0</ulink></title>
			<pubdate>16.04.1999</pubdate>
		</biblioentry>
		<biblioentry>
			<abbrev>OSEK-OS-TPL</abbrev>
			<publisher>
				<publishername>OSEK-VDX</publishername>
			</publisher>
			<title><ulink url="http://portal.osek-vdx.org/files/pdf/modistarc/ostestplan20.pdf">OS Test Plan
			- Document Version: 2.0</ulink></title>
			<pubdate>16.04.1999</pubdate>
		</biblioentry>
		<biblioentry>
			<abbrev>OSEK-OS-TPR</abbrev>
			<publisher>
				<publishername>OSEK-VDX</publishername>
			</publisher>
			<title><ulink url="http://portal.osek-vdx.org/files/pdf/modistarc/ostestproc20.pdf">OS Test Procedure
			- Document Version: 2.0</ulink></title>
			<pubdate>16.04.1999</pubdate>
		</biblioentry>
		<biblioentry>
			<abbrev>OSEK-VDX</abbrev>
			<publisher>
				<publishername>OSEK-VDX</publishername>
			</publisher>
			<title><ulink url="http://www.osek-vdx.org">OSEK-VDX</ulink></title>
		</biblioentry>
		<biblioentry>
			<abbrev>OIL</abbrev>
			<!--authorgroup>
				<author><surname>OSEK/VDX</surname></author>
			</authorgroup-->
			<!--copyright><holder>OSEK/VDX steering committee</holder></copyright-->
			<!--editor><surname>OSEK</surname></editor-->
			<publisher>
				<publishername>Open Systems and the Corresponding Interfaces for Automotive Electronics</publishername>
			</publisher>
			<title>OIL: OSEK Implementation Language - Version 2.5</title>
			<pubdate>01.07.2004</pubdate>
		</biblioentry>
	</bibliodiv>
	<bibliodiv><title>Tools</title>
		<biblioentry>
			<abbrev>GOBX</abbrev>
			<publisher>
				<publishername>Sam Wang</publishername>
			</publisher>
			<title><ulink url="http://gobx.sourceforge.net/">The free OSEK configuration builder</ulink></title>
		</biblioentry>
		<biblioentry>
			<abbrev>Tortoise SVN</abbrev>
			<!--authorgroup>
				<author><surname>OSEK/VDX</surname></author>
			</authorgroup-->
			<!--copyright><holder>OSEK/VDX steering committee</holder></copyright-->
			<!--editor><surname>OSEK</surname></editor-->
			<!--isbn>0-201-10088-6</isbn-->
			<publisher>
				<publishername>Tigris.org</publishername>
			</publisher>
			<title><ulink url="http://tortoisesvn.net/docs/release/TortoiseSVN_en/index.html">TortoiseSVN - A Subversion client for Windows - Version 1.6.1</ulink></title>
			<pubdate>17.02.2005</pubdate>
		</biblioentry>
	</bibliodiv>
</bibliography>

</book>


